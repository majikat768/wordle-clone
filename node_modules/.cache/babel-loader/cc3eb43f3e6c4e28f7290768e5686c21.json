{"ast":null,"code":"var _jsxFileName = \"/var/www/micatk/wordle-solver/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Space from './Space';\nimport { useContext } from 'react';\nimport { AppContext } from './App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = function (props) {\n  _s();\n\n  const {\n    board,\n    attempt,\n    word,\n    gameover\n  } = useContext(AppContext);\n  const rows = [];\n\n  for (let i = 0; i < 6; i += 1) {\n    let row = [];\n    let w = word.slice();\n    let statuses = ['wrong', 'wrong', 'wrong', 'wrong', 'wrong'];\n\n    for (let j = 0; j < 5; j += 1) {\n      if (w[j] == board[i][j]) {\n        statuses[j] = 'correct';\n        w = w.replace(board[i][j], '.');\n      }\n    }\n\n    for (let j = 0; j < 5; j += 1) {\n      if (statuses[j] != 'correct' && w.includes(board[i][j])) {\n        statuses[j] = 'almost';\n        w = w.replace(board[i][j], '.');\n      }\n    }\n\n    for (let j = 0; j < 5; j += 1) {\n      let status;\n\n      if (i > attempt) {\n        status = 'none';\n      } else if (i == attempt) {\n        status = 'current';\n      } else if (i < attempt) {\n        status = statuses[j];\n      }\n\n      row.push( /*#__PURE__*/_jsxDEV(Space, {\n        attempt: i,\n        space: j,\n        status: status\n      }, [i, j], false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this));\n    }\n\n    rows.push(row);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: rows.map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guess\",\n      children: row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 32\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"OCrnVM54aKSU7wuSf/WQuPgz1Ys=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","Space","useContext","AppContext","Board","props","board","attempt","word","gameover","rows","i","row","w","slice","statuses","j","replace","includes","status","push","map"],"sources":["/var/www/micatk/wordle-solver/src/Board.js"],"sourcesContent":["import React from 'react';\r\nimport Space from './Space'\r\nimport { useContext } from 'react';\r\nimport { AppContext } from './App';\r\n\r\nconst Board = function (props) {\r\n\r\n    const { board, attempt, word, gameover } = useContext(AppContext);\r\n    const rows = [];\r\n\r\n    for (let i = 0; i < 6; i += 1) {\r\n        let row = [];\r\n        let w = word.slice();\r\n        let statuses = ['wrong','wrong','wrong','wrong','wrong'];\r\n        for(let j = 0; j < 5; j += 1) {\r\n            if(w[j] == board[i][j]) {\r\n                statuses[j] = 'correct';\r\n                w = w.replace(board[i][j],'.');\r\n            }\r\n        }\r\n        for(let j = 0; j < 5; j += 1) {\r\n            if(statuses[j] != 'correct' && w.includes(board[i][j])) {\r\n                statuses[j] = 'almost';\r\n                w = w.replace(board[i][j],'.');\r\n            }\r\n        }\r\n\r\n        for (let j = 0; j < 5; j += 1) {\r\n            let status;\r\n            if(i > attempt) {\r\n                status = 'none';\r\n            }\r\n            else if(i == attempt) {\r\n                status = 'current';\r\n            }\r\n            else if(i < attempt) {\r\n                status = statuses[j];\r\n            }\r\n            row.push(\r\n                <Space\r\n                attempt = {i}\r\n                space = {j}\r\n                status = {status}\r\n                key = {[i, j]}\r\n                />\r\n            )\r\n        }\r\n        rows.push(row)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='board'>\r\n            {rows.map((row) => <div className='guess'>{row}</div>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,UAAT,QAA2B,OAA3B;;;AAEA,MAAMC,KAAK,GAAG,UAAUC,KAAV,EAAiB;EAAA;;EAE3B,MAAM;IAAEC,KAAF;IAASC,OAAT;IAAkBC,IAAlB;IAAwBC;EAAxB,IAAqCP,UAAU,CAACC,UAAD,CAArD;EACA,MAAMO,IAAI,GAAG,EAAb;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;IAC3B,IAAIC,GAAG,GAAG,EAAV;IACA,IAAIC,CAAC,GAAGL,IAAI,CAACM,KAAL,EAAR;IACA,IAAIC,QAAQ,GAAG,CAAC,OAAD,EAAS,OAAT,EAAiB,OAAjB,EAAyB,OAAzB,EAAiC,OAAjC,CAAf;;IACA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,IAAI,CAA3B,EAA8B;MAC1B,IAAGH,CAAC,CAACG,CAAD,CAAD,IAAQV,KAAK,CAACK,CAAD,CAAL,CAASK,CAAT,CAAX,EAAwB;QACpBD,QAAQ,CAACC,CAAD,CAAR,GAAc,SAAd;QACAH,CAAC,GAAGA,CAAC,CAACI,OAAF,CAAUX,KAAK,CAACK,CAAD,CAAL,CAASK,CAAT,CAAV,EAAsB,GAAtB,CAAJ;MACH;IACJ;;IACD,KAAI,IAAIA,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,IAAI,CAA3B,EAA8B;MAC1B,IAAGD,QAAQ,CAACC,CAAD,CAAR,IAAe,SAAf,IAA4BH,CAAC,CAACK,QAAF,CAAWZ,KAAK,CAACK,CAAD,CAAL,CAASK,CAAT,CAAX,CAA/B,EAAwD;QACpDD,QAAQ,CAACC,CAAD,CAAR,GAAc,QAAd;QACAH,CAAC,GAAGA,CAAC,CAACI,OAAF,CAAUX,KAAK,CAACK,CAAD,CAAL,CAASK,CAAT,CAAV,EAAsB,GAAtB,CAAJ;MACH;IACJ;;IAED,KAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;MAC3B,IAAIG,MAAJ;;MACA,IAAGR,CAAC,GAAGJ,OAAP,EAAgB;QACZY,MAAM,GAAG,MAAT;MACH,CAFD,MAGK,IAAGR,CAAC,IAAIJ,OAAR,EAAiB;QAClBY,MAAM,GAAG,SAAT;MACH,CAFI,MAGA,IAAGR,CAAC,GAAGJ,OAAP,EAAgB;QACjBY,MAAM,GAAGJ,QAAQ,CAACC,CAAD,CAAjB;MACH;;MACDJ,GAAG,CAACQ,IAAJ,eACI,QAAC,KAAD;QACA,OAAO,EAAIT,CADX;QAEA,KAAK,EAAIK,CAFT;QAGA,MAAM,EAAIG;MAHV,GAIO,CAACR,CAAD,EAAIK,CAAJ,CAJP;QAAA;QAAA;QAAA;MAAA,QADJ;IAQH;;IACDN,IAAI,CAACU,IAAL,CAAUR,GAAV;EACH;;EAGD,oBACI;IAAK,SAAS,EAAC,OAAf;IAAA,UACKF,IAAI,CAACW,GAAL,CAAUT,GAAD,iBAAS;MAAK,SAAS,EAAC,OAAf;MAAA,UAAwBA;IAAxB;MAAA;MAAA;MAAA;IAAA,QAAlB;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAnDD;;GAAMR,K;;KAAAA,K;AAqDN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}